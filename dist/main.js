/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/characters.js":
/*!***************************!*\
  !*** ./src/characters.js ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("//sheet has 15 image columns and 5 image rows it 720px length and 267height each is 48px wide by 48px height\n//\nconst DIRECTIONS = [\"N\",\"S\",\"E\",\"W\"]\nconst inflectionY = [-30,250,425,430,535];\nconst inflectionX = [-15, 290, 355, 430, 490, 635, 780, 905, 980, 1050];\nconst humanUnits = [\"Archer\",\"Brigand\",\"Catapult\",\"Cleric\",\"Conjurer\",\"Peasant\",\"Conjurer\",\"Lothar\"];\nconst orcUnits = [\"Necrolyte\",\"Ogre\",\"Grunt\",\"Raider\",\"Skeleton\",\"Spearman\",\"Medivh\",\"Warlock\",\"GaronaGriselda\"];\nconst allBad=[\"Spider\",\"Daemon\",\"Scorpion\"];\nconst conjured=[\"Spider\",\"Daemon\",\"Scorpion\",\"Skeleton\",\"Slime\",\"WaterElemental\",\"FireElemental\"];\nconst working=[\"Daemon\",\"Skeleton\"]\n\n\nfunction Character(characterName, health, game, startX = -10, startY = 250, speedMulty = 1) {\n    //this.sheetname = 'Daemon.png'\n    this.sheetname = working[Math.floor(Math.random()*working.length)];\n    console.log(this.sheetname);\n    this.board = game;\n    this.character = new Image();\n    this.character.src = `../assets/sprites/${this.sheetname}.png`;\n    this.gridCell;\n\n    this.x = startX;\n    this.y = startY;\n\n    this.srcX;\n    this.srcY;\n\n    this.sheetWidth;// = 720;\n    this.sheetHeight;// = 240;\n\n\n    this.cols;// = 15;\n    this.rows;// = 5;\n\n    this.east = 2;\n    this.north = 0;\n    this.south = 4; \n    this.west = 2; \n\n    this.currentFrame = 0;\n\n    if (this.sheetname === \"Skeleton\"){\n        // skeleton sheet 640 * 187 \n        // 20 columns\n        this.sheetWidth = 600;\n        this.sheetHeight = 150;\n        this.cols = 20;\n        this.rows = 5;  \n    }else if (this.sheetname === \"Spider\"){\n        console.log(\"In spider\")\n        // skeleton sheet 640 * 187 \n        // 20 columns\n        this.sheetWidth = 480;\n        this.sheetHeight = 1157;\n\n        this.cols = 5;\n        this.rows = 15;\n\n        this.east = 2;\n        this.north = 0;\n        this.south = 4; \n        this.west = 2; \n    }else if(this.sheetname === \"Daemon\"){\n        this.sheetWidth = 720;\n        this.sheetHeight = 240;\n\n        this.cols = 15;\n        this.rows = 5;\n\n        this.east = 2;\n        this.north = 0;\n        this.south = 4; \n        this.west = 2; \n    }\n\n    this.speed = Math.floor((Math.random()*5*speedMulty)+1);\n    this.size = 1.25;\n\n    this.width = this.sheetWidth/this.cols;\n    this.height = this.sheetHeight/this.rows;\n    this.canChangeDirection = true;\n\n    this.direction = \"E\"; ///\"N\" \"W\" \"S\"\n    //console.log(this);\n\n    this.health = 100;\n\n    this.currentGridLocation = {row: 19, col: 0};\n\n    console.log(this.board.home)\n}\n\nCharacter.prototype.changeDirection = function(directions = DIRECTIONS){\n    this.direction = directions[Math.floor(Math.random()*directions.length)];\n}\n\nCharacter.prototype.setAnimationSheetInfo = function(){\n    if (this.sheetname === \"Skeleton\"){\n        // skeleton sheet 640 * 187 \n        // 20 columns\n        this.sheetWidth = 600;\n        this.sheetHeight = 150;\n        this.cols = 20;\n        this.rows = 5;  \n    }else if (this.sheetname === \"Spider\"){\n        // skeleton sheet 640 * 187 \n        // 20 columns\n        this.sheetWidth = 480;\n        this.sheetHeight = 160;\n        this.cols = 5;\n        this.rows = 15;\n        this.east = 2;\n        this.north = 0;\n        this.south = 4  \n    }\n}\n\n\nCharacter.prototype.whichDirection = function(){\n    if (this.x < -15){\n        this.direction = \"E\";\n    }else if (this.x > 1180){\n        this.x = 1160\n        this.direction = \"W\";\n    }else if (this.y > 535){\n        this.direction = \"N\";\n    }else if (this.y < -30){\n        this.direction = \"S\";\n    }\n    this.currentGridLocation.col = Math.floor((this.x+30)/30);\n    this.currentGridLocation.row = Math.floor((this.y+30)/30);\n    let smallestNeighbor = this.board.grid[this.currentGridLocation.col][this.currentGridLocation.row].smallestNeighbor;\n\n    if( this.currentGridLocation.col < smallestNeighbor.j){\n        this.direction = \"E\";\n    }else if(this.currentGridLocation.col > smallestNeighbor.j){\n        this.direction = \"W\";\n    }else if(this.currentGridLocation.row < smallestNeighbor.i){\n        this.direction = \"S\";\n    }else if(this.currentGridLocation.row > smallestNeighbor.i){\n        this.direction = \"N\";\n    }\n\n    // if smallestNeighbor === \n    //console.log(this.direction);\n\n}\n\nCharacter.prototype.updateFrame = function(ctx) {\n    this.characterDead();\n    this.whichDirection();\n    this.currentFrame = ++this.currentFrame%this.rows;\n    this.srcY = this.currentFrame * this.height;\n    switch (this.direction) {\n        case \"E\":\n            this.srcX = this.width*this.east;//2\n            break;\n        case \"N\":\n            this.srcX = this.width*this.north;//0\n            break;\n        case \"S\":\n            this.srcX = this.width*this.south;//4\n            break;\n        case \"W\":\n            this.srcX = this.width*this.west;//2\n            break;\n        default:\n            break;\n    }\n\n    if (this.direction === \"E\"){\n        this.x += this.speed;\n    }else if (this.direction === \"W\"){\n        this.x -= this.speed;\n    }else if (this.direction === \"N\"){\n        this.y -= this.speed;\n    }else if (this.direction === \"S\"){\n        this.y += this.speed;\n    }\n    \n}\n\nCharacter.prototype.draw = function(game){\n    \n    let ctx = game.ctx;\n\n    this.updateFrame(ctx);\n    if (this.direction === \"W\"){\n        ctx.save();\n        ctx.scale(-1,1);\n        ctx.drawImage(this.character, this.srcX, this.srcY, this.width, this.height, -this.x, this.y, this.width*this.size, this.height*this.size)\n        ctx.restore();\n    }else{\n        ctx.drawImage(this.character, this.srcX, this.srcY, this.width, this.height, this.x, this.y, this.width*this.size, this.height*this.size)\n    }\n}\n\nCharacter.prototype.characterDead = function(){\n    let homeBase = {row: this.board.home.i, col: this.board.home.j};\n    let hRow = this.board.home.i;\n    let hCol = this.board.home.j;\n    let cRow = this.currentGridLocation.row;\n    let cCol = this.currentGridLocation.col;\n    //console.log(homeBase)\n    if ((hRow-cRow < 2 && hCol-cCol < 2)){\n        console.log(\"in removing character\")\n        this.board.remove(\"baddy\",this);\n    }\n}\n\nmodule.exports = Character;\n\n\n\n\n\n\n\n\n\n\n\n\n// let sheetname = 'Daemon.png'\n\n// let character = new Image();\n// character.src = \"../assets/sprites/Daemon\"\n\n// let x = 0;\n// let y = 0;\n\n// let srcX;\n// let srcY;\n\n// sheetWidth = 720;\n// sheetHeight = 240;\n\n// let cols = 15;\n// let rows = 5;\n\n// let width = sheetWidth/cols;\n// let height = sheetHeight/rows;\n\n// let currentFrame = 0;\n\n//# sourceURL=webpack:///./src/characters.js?");

/***/ }),

/***/ "./src/graph_cell.js":
/*!***************************!*\
  !*** ./src/graph_cell.js ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("\n\nfunction GraphCell(board, id, i, j) {\n    this.id = id;\n    this.board = board;\n    this.cellWidth = this.board.cellWidth;\n    this.location = {x: i*this.cellWidth ,y: j*this.cellWidth}\n    this.parentNode = \"\";\n    this.context = this.board.ctx;\n\n    //Currently flipped becuase in game we created colums first and populated them\n    this.i = j;\n\tthis.j = i;\n\n\tthis.f = 0; \n\tthis.g = 0;\n\tthis.h = 0;\n\n    this.neighbors = [];\n    this.smallestNeighbor;\n    this.directionFromNearestNeighbor = \"E\";\n\tthis.previous = undefined;\n    this.shortestPath = [];\n    \n\tthis.wall = false;\n    this.walkingPath = false;\n\tthis.startingArea = false;\n\tthis.isTower = false;\n    this.pathScore = -1;\n}\n\n\n\n\nGraphCell.prototype.addNeighbors = function(){\n\n    let col = this.j;\n    let row = this.i;\n    let grid = this.board.grid;\n\n    if(row > 0 && !this.wall && !grid[col][row-1].wall){\n        this.neighbors.push(grid[col][row-1]);\n    }\n    if(col < grid.length-1 && !this.wall && !grid[col+1][row].wall){\n        this.neighbors.push(grid[col+1][row]);\n    }\n    if(row < grid[col].length-1 && !this.wall && !grid[col][row+1].wall){\n        this.neighbors.push(grid[col][row+1]);\n    }\n    if(col > 0 && !this.wall && !grid[col-1][row].wall){\n        this.neighbors.push(grid[col-1][row]);\n    }\n}\n\nGraphCell.prototype.render = function(){\n    if (this.wall){\n        this.context.fillStyle = \"#8c1d35\";\n    }else{\n        this.context.fillStyle = \"#42f5b3\";\n    }\n    this.context.strokeStyle = \"#2e5244\";\n    this.context.fillRect(this.location.x, this.location.y, this.cellWidth, this.cellWidth);\n    this.context.strokeRect(this.location.x, this.location.y, this.cellWidth, this.cellWidth);\n    this.context.font = \"10px Arial\";\n    this.context.fillStyle=\"#000000\";\n    this.context.fillText(this.pathScore,this.location.x+5,this.location.y+15);\n\n}\n\nGraphCell.prototype.getLeastNeighborPath = function(){\n    let smallestScore = 64000;\n    this.neighbors.forEach((flanders,idx) => {\n        if(flanders.pathScore < smallestScore){\n            smallestScore = flanders.pathScore;\n            this.smallestIdx = idx;\n        }\n    })\n\n    this.smallestNeighbor = this.neighbors[this.smallestIdx];\n}\n\nmodule.exports = GraphCell;\n\n/* \nGraphNodes.prototype.construct = function(){\n\t\n    \n    this.openSet = [];\n    this.closedSet = [];\n    this.start;\n    this.end;\n\tthis.w;\n\tthis.h;\n    this.path = [];\n\tthis.displayText;\n\t\n\n}\n\n\nGraphNodes.prototype.removeFromArray = function(arr,elt){\n\tfor (let i = arr.length - 1; i >= 0; i--) {\n\t\tif (arr[i] == elt){\n\t\t\tarr.splice(i,1);\n\t\t}\n\t}\n}\n\nGraphNodes.prototype.heuristic = function(a,b){\n\t//euclidean distance\n\t//let d = dist(a.i,a.j,b.i,b.j);\n\n\t//taxicab distance\n\tlet d = abs(a.i-b.i) + abs(a.j-b.j);\n\treturn d;\n}\n\n\n\nfunction Local(i,j){\n\t//passing these in to save location in grid\n\tthis.i = i;\n\tthis.j = j;\n\n\tthis.f = 0; \n\tthis.g = 0;\n\tthis.h = 0;\n\n\tthis.neighbors = [];\n\tthis.previous = undefined;\n\tthis.wall = false;\n\tthis.shortestPath = [];\n\n\t//setting up obstacles\n\t// if (random(1) < 0.40 ){\n\t// \tthis.wall = true;\n\t// }\n\n\tthis.addNeighbors = function(grid){\n\t\tif(i < cols-1){\n\t\t\tthis.neighbors.push(grid[this.i+1][this.j]);\n\t\t}\n\t\tif(i > 0){\n\t\t\tthis.neighbors.push(grid[this.i-1][this.j]);\n\t\t}\n\t\tif(j < rows-1){\n\t\t\tthis.neighbors.push(grid[this.i][this.j+1]);\n\t\t}\n\t\tif(j > 0){\n\t\t\tthis.neighbors.push(grid[this.i][this.j-1]);\n\t\t}\n\t\tif(i > 0 && j > 0){\n\t\t\tthis.neighbors.push(grid[this.i-1][this.j-1]);\n\t\t}\n\t\tif(i < cols - 1  && j > 0){\n\t\t\tthis.neighbors.push(grid[this.i+1][this.j-1]);\n\t\t}\n\t\tif(i > 0 && j < rows-1){\n\t\t\tthis.neighbors.push(grid[this.i-1][this.j+1]);\n\t\t}\n\t\tif(i < cols - 1 && j < rows - 1){\n\t\t\tthis.neighbors.push(grid[this.i+1][this.j+1]);\n\t\t}\n\t\t\n\t}\n}\n\n\n\n\nGraphNodes.prototype.createGrid = function(){\n\tthis.w = this.width/cols;\n\tthis.h = this.height/rows;\n\n\tfor (let i = 0; i < cols; i++){\n\t\ttheGrid[i] = new Array(rows);\n\t}\n\n\tfor (let i = 0; i < cols; i++){\n\t\tfor (let j = 0; j < rows; j++){\n\t\t\ttheGrid[i][j] = new Local(i,j);\n\t\t}\n\t}\n\n\tfor (let i = 0; i < cols; i++){\n\t\tfor (let j = 0; j < rows; j++){\n\t\t\ttheGrid[i][j].addNeighbors(theGrid);\n\t\t}\n\t}\n\n\tthis.start = theGrid[0][0];\n\tthis.end = theGrid[rows-1][cols-1];\n\tthis.start.wall = false;\n\tthis.end.wall = false;\n\tthis.openSet.push(start);\n\t\n\tconsole.log(theGrid);\n\n}\n\nfunction noSolution(textToPass){\n\tdisplayText = textToPass;\n}\n\nGraphNodes.prototype.run = function(){\n\tif (this.openSet.length > 0){\n\n\t\t//keep going\n\t\tlet winner = 0;\n\t\tfor (let i = 0; i < openSet.length; i++){\n\t\t\tif(openSet[i].f < openSet[winner].f){\n\t\t\t\twinner = i;\n\t\t\t}\n\t\t}\n\n\t\tlet current = openSet[winner];\n\n\t\tif(current ===  end){\n\n\t\t\tpath = [];\n\t\t\tlet temp = current;\n\t\t\tpath.push(current);\n\t\t\twhile(temp.previous){\n\t\t\t\tpath.push(temp.previous);\n\t\t\t\ttemp = temp.previous;\n\t\t\t}\n\t\t\tnoLoop();\n\t\t\tconsole.log(\"Done\");\n\t\t\tconsole.log(path);\n\t\t}\n\n\t\tclosedSet.push(current);\n\t\tremoveFromArray(openSet,current);\n\n\t\tlet neighbors = current.neighbors;\n\n\t\tfor (let i = 0; i < neighbors.length; i++){\n\t\t\tlet neighbor = neighbors[i];\n\n\t\t\tif (!closedSet.includes(neighbor) && !neighbor.wall){\n\t\t\t\tlet tempG = current.g + 1;\n\n\t\t\t\tlet newPath = false;\n\t\t\t\tif (openSet.includes(neighbor)){\n\t\t\t\t\tif (tempG < neighbor.g){\n\t\t\t\t\t\tneighbor.g = tempG;\n\t\t\t\t\t\tnewPath = true;\n\t\t\t\t\t}\n\t\t\t\t}else{\n\t\t\t\t\tneighbor.g = tempG;\n\t\t\t\t\tnewPath = true;\n\t\t\t\t\topenSet.push(neighbor);\n\t\t\t\t}\n\n\t\t\t\tif(newPath){\n\t\t\t\t\tneighbor.h = heuristic(neighbor,end);\n\t\t\t\t\tneighbor.f = neighbor.g + neighbor.h;\n\t\t\t\t\tneighbor.previous = current;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t}else{\n\n\t\t// no solution\n\t\tnoLoop();\n\t\tconsole.log(\"No Solution\");\n\t\tnoSolution(\"No Solution\");\n\t\tconsole.log(path);\n\t\treturn;\n\t}\n\n\tfor (let i = 0; i < cols; i++){\n\t\tfor (let j = 0; j < rows; j++){\n\t\t\ttheGrid[i][j];\n\t\t}\n\t}\n\n\tfor (let i = 0; i < closedSet.length; i++){\n\t\tclosedSet[i];\n\t}\n\n\tfor (let i = 0; i < openSet.length; i++){\n\t\topenSet[i];\n\t}\t\n\n\n\tpath = [];\n\tlet temp = current;\n\tpath.push(temp);\n\twhile(temp.previous){\n\t\tpath.push(temp.previous);\n\t\ttemp = temp.previous;\n\t}\n\t\n\n\t// noFill();\n\t// stroke(255);\n\t// strokeWeight(w/2);\n\t// beginShape();\n\t// for (let i = 0; i < path.length; i++){\n\t// \tvertex(path[i].i*w + w/2, path[i].j*h + h/2);\n\t// }\n\t// endShape();\n\t//console.log(path);\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodule.exports = GraphNodes;\n\n\n\n\n*/\n\n\n\n//# sourceURL=webpack:///./src/graph_cell.js?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("\nconst Tower = __webpack_require__(/*! ./tower */ \"./src/tower.js\");\nconst Character = __webpack_require__(/*! ./characters */ \"./src/characters.js\")\nconst GraphCell = __webpack_require__(/*! ./graph_cell */ \"./src/graph_cell.js\");\nconst Projectile = __webpack_require__(/*! ./projectile */ \"./src/projectile.js\")\n\nlet game;\n//\nlet fps = 20;\nlet now;\nlet then = Date.now();\nlet interval = 1000/fps;\nlet delta;\n\nlet initialize = function(){\n  game = new Game();\n  window.setTimeout(animation, 200);\n}\n\nlet animation = function(){\n  window.requestAnimationFrame(animation);\n  \n  now = Date.now();\n  delta = now - then;\n  \n  if (delta > interval) {\n    \n    then = now - (delta % interval);\n      game.run();\n    }\n}\n\nlet mousePos = {x: -60, y: -60};\nwindow.addEventListener('mousemove',(event)=>{\n  mousePos.x = event.x;\n  mousePos.y = event.y;\n  //console.log(mousePos)\n})\n\nclass Game {\n  constructor(baddiesType = \"orcs\"){\n    this.tiles = []\n    this.towers = [];\n    this.baddies = [];\n    this.projectiles = [];\n    this.grid = []\n\n\n    this.currentScore = 0;\n    this.bank = 1000;\n    this.score= 0;\n    this.currentHealth = 1000;\n    this.wallVal = 10;\n\n\n    this.currWave = 0;\n    this.boardImg = new Image();\n    this.boardImg.src = `../assets/sprites/game_board_01.png`;\n    //dynamic homebase \n    this.homeImg = new Image();\n    this.homeImg.src = `../assets/sprites_towers/home_against_${baddiesType}.png`;\n    \n    this.waveAmount = 5;\n    this.baddiesType = baddiesType; \n    \n\n    //Towers are created Dynamically and set on the canvas\n    this.towerSelected = false;\n    this.towerSelectors = this.createTowerSelectors();\n    this.setTowerFunctions(this.towerSelectors);\n\n    window.game = this;\n\n    this.board = document.createElement(\"canvas\");\n    if(!this.board || !this.board.getContext){\n      throw \"Issues with Canvas or Board\"\n    }\n    this.board.width = 1200;\n    this.board.height = 600;\n    document.getElementById(\"canv\").appendChild(this.board);\n\n    //event listeners\n    this.board.addEventListener('mousemove', this.handleBoardMouseMoved, false)\n    this.board.addEventListener('mouseover', this.handleBoardMouseOver, false)\n    this.board.addEventListener('click', this.handleBoardMouseClick, false)\n\n\n    this.ctx = this.board.getContext(\"2d\");\n    if(!this.ctx){\n      throw \"invalid context\";\n    }\n\n    this.cellWidth = 30;\n    this.gridCols = this.board.width/this.cellWidth;\n    this.gridRows = this.board.height/this.cellWidth;\n    this.createGrid();\n    this.generateNextWave();\n\n  }\n\n  \n  run(){\n    this.render(this.ctx);\n    //this.generateNextWave();\n  }\n\n  \n  render(ctx){\n      ctx.clearRect(0,0,this.board.width,this.board.height);\n      //The Board\n      // ctx.drawImage(this.tile, this.srcX, this.srcY, this.width, this.height, this.x, this.y, this.width*6, this.height*9)\n      ctx.drawImage(this.boardImg, 0, 0, this.board.width, this.board.height, 0, 0, this.board.width, this.board.height)\n      ctx.drawImage(this.homeImg, 1100, 255);\n\n        //Put Baddies on the board\n        for (let i = 0; i < this.baddies.length; i++) {\n          const baddy= this.baddies[i];\n          //console.log(baddy);\n          baddy.draw(this)\n          \n        }\n        \n        for (let t = 0; t < this.towers.length; t++) {\n          const tower = this.towers[t];\n          //console.log(baddy);\n          tower.run(this);\n          \n        }\n\n        for (let p = 0; p < this.projectiles.length; p++) {\n          const projectile = this.projectiles[p];\n          //console.log(baddy);\n          projectile.run(this);\n          \n        }\n\n\n        //The Path Grid only shown for testing purposes\n        for (let col = 0; col < this.gridCols; col++) {\n            for (let row = 0; row < this.gridRows; row++) {\n                //console.log(col,row);\n                // this.grid[col][row].render();\n            }   \n        }\n\n        \n    }\n\n    //Gets the amount of bank left\n    getBank(){\n      return this.bank;\n    }\n\n\n    //Tower Display, Selection and Dropping\n    setTowerFunctions(towerSelectorsArray){\n\n\n      towerSelectorsArray.forEach((tower, i)=>{\n        tower.addEventListener('mouseover',this.selectorHoverOn, false)\n        tower.addEventListener('mouseout',this.selectorHoverOff, false)\n        tower.addEventListener('mousedown',this.selectorPressed, false)\n        tower.addEventListener('click',this.selectorClick, false)\n      })\n    }\n\n    selectorHoverOn(){\n      this.style.backgroundColor = 'yellow';\n    }\n    selectorHoverOff(){\n      this.style.backgroundColor = '#DDD';\n    }\n    selectorPressed(){\n      this.style.backgroundColor = 'Red';\n    }\n    selectorClick(){\n      this.style.backgroundColor = 'green';\n      if (game.towerSelected === true) return;\n      if (game.getBank() > this.cost){\n        console.log(\"bank was enough\")\n        game.createTower(this);\n        game.towerSelected = true;\n      }else{\n        console.log(\"not enough cheddar\")\n      }\n    }\n\n\n    createTower(selector){\n      let tower = new Tower(selector.cost, selector.tImage, selector.bImage, game);\n      if (tower){\n        console.log(tower);\n        this.towers.push(tower);\n      } else {\n        console.log(\"there was a problem with tower\")\n      }\n  \n    }\n\n\n    createTowerSelectors(){\n      let TowerSelectors = [];\n      for (let i = 0; i < 5; i++) {\n        let tSelector = document.createElement(\"div\");\n        let tSelectedImgPath = `../assets/sprites_towers/tower_against_${this.baddiesType}_0${i+1}.png`;\n        let tSelectedBulletImgPath = `../assets/sprites_bullets/B${i+1}.png`;\n  \n  \n        tSelector.tImage = new Image();\n        tSelector.tImage.addEventListener('load',this.hideImgElement,false);\n        tSelector.tImage.addEventListener('error', ()=>{console.log(\"fail tower\");}, false);\n        tSelector.tImage.src = tSelectedImgPath;\n  \n        tSelector.bImage = new Image();\n        tSelector.bImage.addEventListener('load',this.hideImgElement,false);\n        tSelector.bImage.addEventListener('error', ()=>{console.log(\"fail bullet\");}, false);\n        tSelector.bImage.src = tSelectedBulletImgPath;\n  \n        document.getElementById(\"playables\").append(tSelector)\n  \n        tSelector.cost = 100*i+50;\n        tSelector.id = \"tSel\"+i;\n        TowerSelectors.push(tSelector);\n        let selectorImagePath= `../assets/sprites_towers/tower_against_${this.baddiesType}_0${i+1}.png`;\n        let selectorImage = new Image();\n        selectorImage.addEventListener('error', ()=>{console.log(\"fail selector\");}, false);\n        selectorImage.src = selectorImagePath;\n        tSelector.appendChild(selectorImage);\n      }\n  \n  \n      return TowerSelectors;\n    }\n\n\n\n    //Game logic to add towers to canvas\n    handleBoardMouseMoved(event){\n      game.mouseX = event.offsetX;\n      game.mouseY = event.offsetY;\n      this.mouseX = event.offsetX;\n      this.mouseY = event.offsetY;\n      if(game.towers.length < 1) return;\n      if(!game.towers[game.towers.length-1].placed && game.towerSelected === true){\n        game.towers[game.towers.length-1].location.y = this.mouseY;\n        game.towers[game.towers.length-1].location.x = this.mouseX;\n      }\n    }\n  \n    handleBoardMouseOver(){\n        if(game.towers.length < 1) return;\n        game.towers[game.towers.length-1].shouldDraw = true;\n    }\n  \n    handleBoardMouseClick(event){\n      console.log(event);\n      let row = Math.floor(event.offsetY/game.cellWidth);\n      let col = Math.floor(event.offsetX/game.cellWidth);\n      let node = game.grid[col][row];\n      console.log(node)\n      \n      if(game.towerSelected && game.nodeAvailable(node)){\n      game.putTower(node);\n      }\n\n      else if(!game.towerSelected && !node.hasTower) {\n          // putting walls on the board\n          if (!node.wall && game.getBank() >= game.wallVal){\n              game.bankValue -= game.wallVal;\n              node.wall = true;\n          } else if(!node.wall) {\n              alert(\"Not Enough Dinero\");\n              }\n          else {\n              game.bankValue += game.wallVal;\n              node.wall = false;\n          }\n          //game.brushfire(game.undo(node));   // all new distances and parents\n        }\n    }\n\n    nodeAvailable(node) {\n\n      // add conditions before allowing user to place turret\n      // Some money required but also cannot place tower on a node\n      // of the grid that is occupied or is the root node\n      if(game.towerSelected) {\n          if(!node.wall && !node.isTower && node != game.home){\n            return true;\n          }\n        return(false);\n      }\n    }\n\n\n    putTower(node){\n      console.log(\"Testing\");\n      console.log(node)\n        game.towers[game.towers.length-1].location = {\n          x: ((node.j*this.cellWidth)+this.cellWidth/2),\n          y: ((node.i*this.cellWidth)+this.cellWidth/2)\n        };\n\n        game.towers[game.towers.length-1].placed = true;\n        node.isTower = true;\n        game.towerSelected = false;\n\n    }\n\n    //Wave Logic including brushfire grid and baddy generation\n    createGrid(){\n        let id = 0\n        for (let i = 0; i < this.gridCols; i++) {\n          this.grid.push([]);\n          for (let j = 0; j < this.gridRows; j++) {\n              this.grid[i].push(new GraphCell(this,++id, i, j))\n          }\n  \n        }\n\n\n      for (let col = 0; col < this.gridCols; col++) {\n            for (let row = 0; row < this.gridRows; row++) {\n                //console.log(col,row);\n                this.grid[col][row].addNeighbors();\n            }   \n        }\n\n        this.home = this.grid[this.gridCols-1][this.gridRows/2];\n        this.home.wall = false;\n        this.home.pathScore = 0;\n\n        this.createPaths();\n    }\n\n\n    createPaths(){\n        //I will be using the brushfire design with end goal in mind\n        let checkFifo = [this.home];\n        while (checkFifo.length > 0){\n            let currentCell = checkFifo.shift();\n            currentCell.neighbors.forEach(flanders => {\n                if (flanders.pathScore === -1){\n                    checkFifo.push(flanders); \n                    flanders.pathScore = currentCell.pathScore+1;\n                }\n            })\n        }\n\n\n        for (let col = 0; col < this.gridCols; col++) {\n            for (let row = 0; row < this.gridRows; row++) {\n                //console.log(col,row);\n                if(!this.grid[col][row].wall){\n                    this.grid[col][row].getLeastNeighborPath();\n                }\n            }   \n        }\n    }\n\n  generateNextWave(){\n    for (let i = 0; i < this.waveAmount; i++) {\n        let newX = Math.floor(Math.random()*1200);\n        let newY = Math.floor(Math.random()*600);\n      let newBaddy = new Character(0,0,this,newX, newY);\n      this.baddies.push(newBaddy);\n         \n    }\n  }\n  \n\n  remove(objectType, item){\n    if (objectType === \"projectile\"){\n      this.projectiles.splice(this.projectiles.indexOf(item), 1);\n    }else if (objectType === \"baddy\"){\n      this.baddies.splice(this.baddies.indexOf(item), 1);\n    }\n  }\n  \n  \n}\n\n\nwindow.addEventListener('load', initialize, false);\n\n//# sourceURL=webpack:///./src/index.js?");

/***/ }),

/***/ "./src/projectile.js":
/*!***************************!*\
  !*** ./src/projectile.js ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("\nlet Projectile = function(location, enemyOrientationAngle, prjImg, velocity = 6, game){\n    this.location = location;\n    this.enemyOrientationAngle = enemyOrientationAngle;\n    this.prjImg = prjImg;\n    this.velocity = velocity;\n    this.game = game;\n    console.log(this.location)\n    console.log(this.game);\n\n}\n\nProjectile.prototype = {\n    run:function(){\n        this.update();\n        this.draw();\n    },\n    \n    update:function(){\n        this.isOutOfBounds();\n        this.location.x += Math.sin(this.enemyOrientationAngle)*this.velocity;\n        this.location.y += Math.cos(this.enemyOrientationAngle)*this.velocity;\n\n    },\n    \n    draw:function(){\n        this.game.ctx.save();\n        this.game.ctx.translate(this.location.x,this.location.y);\n        this.game.ctx.rotate(this.enemyOrientationAngle);\n        this.game.ctx.drawImage(this.prjImg, -this.prjImg.width/2, -this.prjImg.height/2)\n        this.game.ctx.restore();\n\n    },\n\n    collided:function(){\n        this.game.ctx.save();\n        this.game.ctx.translate(this.location.x,this.location.y);\n        this.game.ctx.rotate(this.enemyOrientationAngle);\n        this.game.ctx.drawImage(this.prjImg, -this.prjImg.width/2, -this.prjImg.height/2)\n        this.game.ctx.restore();\n\n    },\n\n    isOutOfBounds:function(){\n        let height = this.game.ctx.canvas.height;\n        let width = this.game.ctx.canvas.width;\n\n        if (this.location.x < 0 || this.location.y < 0 || this.location.x > width || this.location.y > height){ \n            this.game.remove(\"projectile\",this)\n        };\n    },\n\n    collideWith:function(otherObject) {\n        if (otherObject instanceof Character) {\n          otherObject.health -= 25;\n          return true;\n        }\n        return false;\n      },\n\n}\n\nmodule.exports = Projectile;\n\n\n//# sourceURL=webpack:///./src/projectile.js?");

/***/ }),

/***/ "./src/tower.js":
/*!**********************!*\
  !*** ./src/tower.js ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const Projectile = __webpack_require__(/*! ./projectile */ \"./src/projectile.js\");\n\n\nclass Tower{\n\n    constructor(cost, towerImage, projectileImg, game, loc = {x:600,y:300}, firingRange=300){\n        this.cost = cost;\n        this.image = towerImage;\n        this.projectileImg = projectileImg;\n        this.location = loc;\n        this.enemyOrientationAngle = 0;\n        this.game = game;\n        this.placed = false;\n        this.shouldDraw = false;\n        this.firingRange = firingRange;\n        this.projectileSpeed = 6;\n\n        this.lastFired = Date.now();\n        this.reloadTime = 500;\n        console.log(\"tower constructed\")\n\n        this.shoot = this.shoot.bind(this);\n    }\n\n    checkForBaddies(){\n        let dx = this.location.x - this.game.mouseX;\n        let dy = this.location.y - this.game.mouseY;\n\n        let distanceToTarget = Math.sqrt(Math.pow(dx,2)+Math.pow(dy,2))\n\n        if (Date.now()-this.reloadTime > this.lastFired && distanceToTarget <= this.firingRange && this.placed){\n            this.shoot();\n            this.lastFired = Date.now();\n        }\n    }\n\n    shoot(){\n        console.log(\"shooting\")\n        let newProj = new Projectile({x:this.location.x, y:this.location.y}, this.enemyOrientationAngle, this.projectileImg, this.projectileSpeed, this.game)\n        this.game.projectiles.push(newProj);\n    }\n\n    run(){\n        this.update();\n        this.checkForBaddies();\n        this.draw();\n    }\n\n    update(){\n        let dx = this.location.x - this.game.mouseX;\n        let dy = this.location.y - this.game.mouseY;\n        this.enemyOrientationAngle = Math.atan2(dx,dy)-Math.PI;\n    }\n\n    draw(){\n        this.game.ctx.save();\n        this.game.ctx.translate(this.location.x,this.location.y);\n        if(this.shouldDraw){\n            this.game.ctx.drawImage(this.image, -this.image.width/2, -this.image.height/2)\n        }\n        this.game.ctx.restore();\n    }\n\n\n}\n\nmodule.exports = Tower;\n\n//# sourceURL=webpack:///./src/tower.js?");

/***/ })

/******/ });